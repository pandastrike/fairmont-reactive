# Example: Reactive File Watcher

This example build on the previous examples of an echo server and `hello world` web server.
In this example, we're going to generate `change` events from watching a set of files, listen for those events, and run our tests whenever we get one.
We'll also throttle the events so we don't run the tests unnecessarily.

We need a couple of things from the Node APIs so we can watch the files.

    {join} = require "path"
    fs = require "fs"

We also need to pick up some functions from Fairmont.

    {go, events, throttle, map, pull} = require "../src"

    {spread, shell, lsR} = require "fairmont"

This is the directory that contains the files we're watching. In real life, we'd probably get this from the command line or a configuration file.

    src = join __dirname, "..", "src"

As before, we'll use `go` to run our reactive flow.

    go [

We'll initialize our flow with the list of files returned by `lsR`.
The resulting Promise will be coerced into an asynchronous iterator that produces path values.

      lsR src

These are passed into `map`, which starts a nested flow.

      map (path) ->
        go [

We kick this flow off with events generated by Node's FSWatcher.

          events "change", fs.watch path

Since this sometimes generates duplicate events, we `throttle` the events to ignore events that occurr within 5 seconds of the last event we processed.

          throttle 5000

We get two arguments from the events.
These are passed in as an array, so we use `spread` to convert the array into a list of arguments.

          map spread (event, file) ->

We'll log that we got an event and then run `npm test`.

            console.log "Detected change in #{file}"
            shell "npm test"

Since the `shell` function returns a Promise, we have `pull` out the Promise into a value.

          pull

Otherwise, we would have gotten a Promise as the argument to our last `map` function, which logs the output of the shell command via the console.

          map (s) -> console.log s.stdout
        ]
    ]
